{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","App.tsx","components/TodoModal/TodoModal.tsx","index.tsx"],"names":["TodoList","renderTodos","activeTodo","setActiveTodo","setActiveTodoUserId","className","map","todo","id","title","completed","cn","type","onClick","userId","TodoFilter","setFilterBy","setQuery","query","filterBy","value","onChange","event","selectedValue","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Select","TodoModal","activeTodoUserId","useState","user","setUser","useEffect","href","email","name","App","isLoading","setIsLoading","todos","setTodos","All","finally","statusSelector","toRenderTodos","filter","toLowerCase","includes","Active","Completed","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec88bcfd.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  renderTodos: Todo[]\n  activeTodo: Todo | null;\n  setActiveTodo: (activeTodo: Todo) => void;\n  setActiveTodoUserId: (userId: number) => void\n}\n\nexport const TodoList: React.FC<Props> = ({\n  renderTodos,\n  activeTodo,\n  setActiveTodo,\n  setActiveTodoUserId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {renderTodos.map((todo) => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        return (\n          <tr data-cy=\"todo\" className=\"\" key={id}>\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setActiveTodoUserId(todo.userId);\n                  setActiveTodo(todo);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={cn(\n                    'far',\n                    {\n                      'fa-eye': activeTodo?.id !== id,\n                      'fa-eye-slash': activeTodo?.id === id,\n                    },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { Select } from '../../types/Select';\n\ninterface Props {\n  setFilterBy: (filter: Select) => void;\n  setQuery: (query: string) => void;\n  query: string;\n  filterBy: Select;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  setFilterBy,\n  setQuery,\n  query,\n  filterBy,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={event => {\n            const selectedValue = event.target.value as Select;\n\n            setFilterBy(selectedValue);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        value={query}\n        placeholder=\"Search...\"\n        onChange={event => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n        {query && (\n          /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nenum Select {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nfunction filterTodos(todos: Todo[], query: string, statusSelector: Select) {\n  let toRenderTodos: Todo[] = [...todos];\n\n  if (query) {\n    toRenderTodos = toRenderTodos.filter(todo => (todo.title.toLowerCase().includes(query.toLowerCase())));\n  }\n\n  switch (statusSelector) {\n    case Select.Active:\n      return toRenderTodos.filter(todo => !todo.completed);\n    case Select.Completed:\n      return toRenderTodos.filter(todo => todo.completed);\n    default:\n      return toRenderTodos;\n  }\n}\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTodoUserId, setActiveTodoUserId] = useState<number | null>(null);\n  const [activeTodo, setActiveTodo] = useState<Todo | null>(null);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<Select>(Select.All);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const renderTodos = filterTodos(todos, query, filterBy);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setQuery={setQuery}\n                setFilterBy={setFilterBy}\n                query={query}\n                filterBy={filterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    renderTodos={renderTodos}\n                    activeTodo={activeTodo}\n                    setActiveTodo={setActiveTodo}\n                    setActiveTodoUserId={setActiveTodoUserId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {activeTodo && (\n        <TodoModal\n          setActiveTodo={setActiveTodo}\n          activeTodo={activeTodo}\n          activeTodoUserId={activeTodoUserId}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  setActiveTodo: (activeTodo: Todo | null) => void;\n  activeTodo: Todo | null;\n  activeTodoUserId: number | null;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  setActiveTodo,\n  activeTodo,\n  activeTodoUserId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (activeTodoUserId) {\n      getUser(activeTodoUserId).then(setUser);\n    }\n  }, [activeTodoUserId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${activeTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setActiveTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {activeTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn(\n                {\n                  'has-text-success': activeTodo?.completed,\n                  'has-text-danger': !activeTodo?.completed,\n                },\n              )}\n              >\n                {activeTodo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={user.email}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}